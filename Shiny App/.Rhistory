if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
nextword <- as.character(new[which.max(new$x),1])
return(top10, nextword)
#as.character(new[which.max(new$x),1])
}
phrase <- "The guy in front of me just bought a pound of bacon, a bouquet, and a case of"
predict(phrase)$nextword
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
nextword <- as.character(new[which.max(new$x),1])
return(list(top10, nextword) )
#as.character(new[which.max(new$x),1])
}
predict(phrase)[2]
# Test the model on the quiz cases:
phrase <- "The guy in front of me just bought a pound of bacon, a bouquet, and a case of"
predict(phrase)[2]
predict(phrase)[1]
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
nextword <- as.character(new[which.max(new$x),1])
return(list(top10, nextword))
#as.character(new[which.max(new$x),1])
}
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
top10 <- top10[1:10,]
nextword <- as.character(new[which.max(new$x),1])
return(list(top10, nextword))
#as.character(new[which.max(new$x),1])
}
phrase <- "The guy in front of me just bought a pound of bacon, a bouquet, and a case of"
predict(phrase)[1]
predict(phrase)[2]
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
top10 <- top10[1:10,]
return(top10)
}
phrase <- "The guy in front of me just bought a pound of bacon, a bouquet, and a case of"
predict(phrase)
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
top10 <- top10[1:10,]
top10
}
phrase <- "The guy in front of me just bought a pound of bacon, a bouquet, and a case of"
predict(phrase)
top10 <- top10[1:10,]
new
top10 <- new[order(-new$x),]
top10
top10 <- top10[1:10,]
top10
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
top10 <- top10[1:10,]
top10
}
phrase <- "The guy in front of me just bought a pound of bacon, a bouquet, and a case of"
a <- predict(phrase)
a
as.character(a[is.max(a$x),'word'])
as.character(a[which.max(a$x),'word'])
# Basic barplot
p <- ggplot(data=a, aes(x=reorder(word, x), y=x)) +
geom_bar(stat="identity")
# Horizontal bar plot
p + coord_flip() + xlab("Terms") + ylab("Frequency")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
install.packages("shinycssloaders")
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
runApp()
rsconnect::setAccountInfo(name="idejong", token="910510AC28F8CE6A6B8E3BC173BD660E", secret='G3pPTKXEijRQj2ZD0CWAZR49iarFr/oDu3nM++h/')
rsconnect::setAccountInfo(name="idejong", token="910510AC28F8CE6A6B8E3BC173BD660E", secret='G3pPTKXEijRQj2ZD0CWAZR49iarFr/oDu3nM++h/')
library(shiny)
library(tm)
library(stringr)
library(tm)
library(SnowballC)
library(RWeka)
library(corpus)
library(tidyr)
# Function to remove the last word from a string:
rm_firstword <- function(phrase){
#phrase <- sub(phrase, pattern = "'", replacement = "")
sub(phrase, pattern = "^\\S* ", replacement = "")}
get_lastword <- function(phrase){
word(phrase,-1)}
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
top10 <- top10[1:10,]
top10
}
phrase  <- "You're the reason why I smile everyday. Can you follow me please? It would mean the"
predict(phrase)
load(file.path(location_ngrams, "freq1.Rdata"))
location_ngrams <- "Processed data/ngrammodels"
load(file.path(location_ngrams, "freq1.Rdata"))
load(file.path(location_ngrams, "freq2.Rdata"))
load(file.path(location_ngrams, "freq3.Rdata"))
load(file.path(location_ngrams, "freq4.Rdata"))
predict <- function(phrase){
# Preprocess the input phrase by changing all characters to lower, removing
# puntuation (except for sentence markers such as apostrophes and hyphens),
# and removing additional spaces:
phrase <- tolower(phrase)
phrase <- gsub("[-.?!]", " ", gsub("(?![-.?!'])[[:punct:]]", " ",
phrase, perl=T))
phrase <- gsub("  ", " ", phrase)
# Create a variable wordlength:
wordlength <- length(unlist(strsplit(phrase, split=" ")))
# If the input phrase is longer than 3, keep only the last three:
if(wordlength>3){
phrase <- paste(rev(unlist(strsplit(phrase, split=" ")))[3],
rev(unlist(strsplit(phrase, split=" ")))[2],
rev(unlist(strsplit(phrase, split=" ")))[1], sep=" ")
wordlength <- length(unlist(strsplit(phrase, split=" ")))
}
if(wordlength == 3){
dtm_4sub <- freq_4[freq_4$phrase == phrase,]
if(nrow(dtm_4sub)!=0){
dtm_4sub$score <- dtm_4sub$count / freq_3[freq_3$original==phrase,"count"]}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 2){
dtm_3sub <- freq_3[freq_3$phrase == phrase,]
if(nrow(dtm_3sub)!=0){
dtm_3sub$score <- 0.4 *(dtm_3sub$count/freq_2[freq_2$original==phrase,"count"])}
phrase <- rm_firstword(phrase)
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 1){
dtm_2sub <- freq_2[freq_2$phrase == phrase,]
if(nrow(dtm_2sub)!=0){
dtm_2sub$score <- 0.4*0.4* (dtm_2sub$count/freq_1[freq_1$original==phrase,"count"])}
phrase <- ""
wordlength <- length(unlist(strsplit(phrase, split=" ")))}
if(wordlength == 0){
dtm_1sub <- freq_1
dtm_1sub$score <- 0.4*0.4*0.4*dtm_1sub$count / sum(dtm_1sub$count)}
#new <- rbind(dtm1_new, dtm2_new, dtm3_new, dtm4_new, dtm5_new)
new <- rbind(dtm_4sub, dtm_3sub, dtm_2sub, dtm_1sub)
new <- aggregate(new$score, by=list(word=new$nextword), FUN=sum)
new <- subset(new, !(new$word %in% stopwords(kind="en")))
top10 <- new[order(-new$x),]
top10 <- top10[1:10,]
top10
}
phrase  <- "You're the reason why I smile everyday. Can you follow me please? It would mean the"
predict(phrase)
